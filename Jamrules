# You will probably need to edit this file to get everything to compile.
# You may want to review the SharedLink action in Jamshared as well.
#

if $(OS) != MACOSX
{
    Exit "Jam is only supported on macOS" ;
}

BUILD ?= RELEASE ;
USESDL ?= yes ;
USEBABEL ?= yes ;
MAC_USEHOMEBREW ?= no ;
MACOS_MIN_VER ?= 10.7 ;
USETTS ?= no ;

# jam -sGARGLKINI=/usr/local/etc/garglk.ini
GARGLKINI ?= /etc/garglk.ini ;

# jam -sGARGLKPRE=gargoyle-
GARGLKPRE ?= "" ;

CC  ?= gcc ;
CXX ?= g++ ;

Echo "OS is MACOSX (cocoa)" ;
SUFDLL = .dylib ;
MAINARCH = -arch x86_64 -mmacosx-version-min=$(MACOS_MIN_VER) ;
AR = "libtool -static -o" ;
RM = "touch -c" ;
CCFLAGS = -Wno-pointer-sign $(MAINARCH) ;
PKGCONFIG = "pkg-config freetype2 libpng" ;

C++FLAGS = -std=c++14 ;
GARGLKCCFLAGS = "`$(PKGCONFIG) --cflags`" ;
SHRLINKLIBS += "`$(PKGCONFIG) --libs`" -lz ;
# Homebrew's JPEG library package is missing some configuration files.
if $(MAC_USEHOMEBREW) = yes
{
    GARGLKCCFLAGS += "-I`brew --prefix jpeg`/include" ;
    SHRLINKLIBS += "-L`brew --prefix jpeg`/lib" ;
}
SHRLINKLIBS += -ljpeg ;

LINKLIBS = "`$(PKGCONFIG) --libs`" -lz ;
FRAMEWORKS = -framework Cocoa -framework OpenGL ;

if $(USESDL) = yes
{
    PKGCONFIG = "pkg-config SDL2_mixer sdl2 vorbisfile" ;
    GARGLKCCFLAGS += "`$(PKGCONFIG) --cflags`" ;
    SHRLINKLIBS += "`$(PKGCONFIG) --libs`" ;
}

LINK = $(CXX) -headerpad_max_install_names $(FRAMEWORKS) $(MAINARCH) ;

switch $(BUILD)
{
    case DEBUG :
        Echo "BUILD is DEBUG" ;
        OPTIM = -g ;

    case RELEASE :
        Echo "BUILD is RELEASE" ;
        OPTIM = -O2 $(CFLAGS) ;
        LINKFLAGS = $(LDFLAGS) ;
        SHRLINKFLAGS = $(LDFLAGS) ;

    case PROFILE :
        Echo "BUILD is PROFILE" ;
        OPTIM = -g -pg ;
        LINKFLAGS = -pg ;

    case * :
        Exit "Unknown build:" $(BUILD) ;
}

#
# To compile Objective-C files
#

rule UserObject
{
    switch $(>)
    {
    case *.m : Cc $(<) : $(>) ;
    case * : Echo "unknown suffix on" $(>) ;
    }
}

#
# You shouldn't need to touch anything from here on.
#

HDRS = [ FDirName $(TOP) garglk ] ;
BTOP = [ FDirName $(TOP) build $(OS:L).$(BUILD:L) ] ;

rule ObjDir
{
    LOCATE_TARGET = [ FDirName $(BTOP) $(1) ] ;
}

include [ FDirName $(TOP) Jamshared ] ;

rule FPrependRoot
{
    # FPrependRoot prefix : path ;
    #
    # Safely prepend a prefix to a path
    # Use to e.g. install files into a build root

    # FDirName does not allow adding a prefix to a root path
    # ( e.g. [ FDirName /some/path /usr/bin ] -> /usr/bin )
    #
    # Care must be taken not to allow doubled separators in the path:
    # this causes MkDir to fail to traverse up the directory tree
    # and try to create the same directory twice

    local _prefix = [ FDirName $(<) ] ;
    local _path = [ FDirName $(>) ] ;
    local _full ;

    if $(_path) = $(_path:R=$(SLASH))
    {
        # _path is rooted
        _full = $(_prefix) $(_path) ;
    }
    else
    {
        # _path is relative
        if $(_path) = $(DOT)
        {
            _full = $(_prefix) ;
        }
        else
        {
            _full = $(_prefix) $(SLASH)$(_path) ;
    }
    }

    return $(_full:J=) ;

}
